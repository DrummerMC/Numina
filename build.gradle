buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'scala'

// define the properties file
ext.configFile = file "project.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}


new File(config.libs_dir).mkdirs()
def getLibrary(filename) {
    def f = new File(config.libs_dir + filename)
    if (!f.exists()) {
        new URL(config.apisource_url + filename).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
}


getLibrary('CodeChickenCore-dev-0.9.0.7.jar')
getLibrary('NotEnoughItems-dev-1.6.1.8.jar')

version = "${config.mod_version}." + System.getenv("BUILD_NUMBER") ?: "1"
group= "${config.group_id}.${config.mod_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${config.mod_id}"

minecraft {
	version = "${config.minecraft_version}"
}

processResources
{
    // replace stuff in text files, not binary ones.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        // replace version and MCVersion
        expand 'version':version,'MCversion':config.minecraft_version
    }

    // copy everything else, thats not text
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}



task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}
artifacts {
    archives deobfJar
}